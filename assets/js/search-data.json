{
  
    
        "post0": {
            "title": "NextJS",
            "content": "How . Simply create a JS file under the pages directory, and the path to the file becomes the URL path. . In Next.js, you use the React Component that wraps the tag. allows you to do client-side navigation to a different page in the application. . import Link from &#39;next/link&#39; . CSS: . Import it as styles | Use styles.&lt;class-name&gt; as className | In this case, the class name is container, so we’ll use styles.container | . CSS Modules does: It automatically generates unique class names. As long as you use CSS Modules, you don’t have to worry about class name collisions. . Furthermore, Next.js’s code splitting feature works on CSS Modules as well. It ensures the minimal amount of CSS is loaded for each page. This results in smaller bundle sizes. . In Next.js, you can add global CSS files by importing them from _app.js. You cannot import global CSS anywhere else. . To summarize what we’ve learned so far: . To use CSS Modules, import a CSS file named *.module.css from any component. | To use global CSS, import a CSS file in pages/_app.js. | . 2 forms of rendering . https://nextjs.org/learn/basics/data-fetching/two-forms . When to Use Static Generation v.s. Server-side Rendering . We recommend using Static Generation (with and without data) whenever possible because your page can be built once and served by CDN, which makes it much faster than having a server render the page on every request. . You can use Static Generation for many types of pages, including: . Marketing pages | Blog posts | E-commerce product listings | Help and documentation | . You should ask yourself: “Can I pre-render this page ahead of a user’s request?” If the answer is yes, then you should choose Static Generation. . On the other hand, Static Generation is not a good idea if you cannot pre-render a page ahead of a user’s request. Maybe your page shows frequently updated data, and the page content changes on every request. . In that case, you can use Server-Side Rendering. It will be slower, but the pre-rendered page will always be up-to-date. Or you can skip pre-rendering and use client-side JavaScript to populate data. . Static Generation with data . How does it work? Well, in Next.js, when you export a page component, you can also export an async function called getStaticProps. If you do this, then: . getStaticProps runs at build time in production, and… | Inside the function, you can fetch external data and pass that as the props of the page. | . getStaticProps runs only on the server-side. It will never be run on the client-side. It won’t even be included in the JS bundle for the browser. That means you can write code such as direct database queries without them being sent to browsers. . What If I Need to Fetch Data at Request Time? . Static Generation is not a good idea if you cannot pre-render a page ahead of a user’s request. Maybe your page shows frequently updated data, and the page content changes on every request. . In cases like this, you can try Server-side Rendering or skipping pre-rendering. . Using getServerSideProps . Because getServerSideProps is called at request time, its parameter (context) contains request specific parameters. You can learn more in our documentation. . if you do not need to pre-render the data, you can also use the following strategy (called Client-side Rendering): . Statically generate (pre-render) parts of the page that do not require external data. | When the page loads, fetch external data from the client using JavaScript and populate the remaining parts. | . Pages that begin with [ and end with ] are dynamic pages in Next.js. . In pages/posts/[id].js, we’ll write code that will render a post page — just like other pages we’ve created. . Next.js and Vercel . Vercel is made by the creators of Next.js and has first-class support for Next.js. When you deploy your Next.js app to Vercel, the following happens by default: . Pages that use Static Generation and assets (JS, CSS, images, fonts, etc) will automatically be served from the Vercel Edge Network, which is blazingly fast. | Pages that use Server-Side Rendering and API routes will automatically become isolated Serverless Functions. This allows page rendering and API requests to scale infinitely. | . Incremental Static Generation . you can specify fallback: true in getStaticPaths. Then, in the page itself, you can use router.isFallback to see if the loading indicator should be displayed. . With Next.js, you can use Static Generation for maximum performance without sacrificing the benefits of Server-side Rendering. . https://vercel.com/blog/nextjs-server-side-rendering-vs-static-generation . However, by using Server-side Rendering, you’ll give up on the benefits of Static as mentioned above. We suggest trying Incremental Static Generation or Client-side Fetching and see if they fit your needs. . API routes allow us to write to external data sources securely. Using environment variables, we can include secrets for authentication without exposing the values client-side. .",
            "url": "https://www.prakashn.com/js/2022/09/10/NextJS.html",
            "relUrl": "/js/2022/09/10/NextJS.html",
            "date": " • Sep 10, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Pipes Pattern",
            "content": "Problem . Often there is overlap of the functionalities between different modules. In monolith approach, we split it up in reusuable modules and import it in corresponding module. Let take one example about Netflix. In order to support wide variety of encoding, Netflix encodes all the shows in all supported devices. Encoding is CPU intensive task, With monolith approach, we tend to increase the entire capacity of the server, but if you look closely only Encoding service needs to be CPU bound. To support this we can split up the pipeline into small set of tasks which perform dedicated operation on its own. . Solution . . Here a complex process is splitup into small individual process. Let assume that Task A is CPU Intesive, so we can put it in a large machine to make it faster. and Task B is small task and does not require that much compute, we can use Serverless kind of framework or use horizondal scalability to increase the speed of execution. . . To make it **event driven **, we can use queues in between all the tasks, thereby acheiving segregation between each modules. . Why . Pros . Reusability of code (or module) | Performance (large CPU bound tasks can be alloted Large CPU bound machines - vertical scaling) | Scalability (if a certain task takes more time to process, we can horizondally scale to meet the needs) | . Cons . Difficult to Debug | . Reference . Azure Architecture .",
            "url": "https://www.prakashn.com/architecture/2022/08/12/Pipes-Pattern.html",
            "relUrl": "/architecture/2022/08/12/Pipes-Pattern.html",
            "date": " • Aug 12, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Asynchronours Request-Reply Pattern",
            "content": "Problem . Typically frontend expects response to be immediate (less than few seconds), but sometimes backend might take more time than expected. In these cases, requests would be timed out (AWS API Gateway has 30 seconds timeout). . Solution . One way to handle this to make backend asynchrous and do HTTP long polling from the front end. . 1) Make the server async to accept any number of jobs. 2) Offload the time consuming part to a worker. 3) Periodically check from client if worker has finished the request. . . More Options . Instead of long polling we can also use websocket to create a bidirectional connection and send the result from the server, when it is available. We do have a overhead of maintaing the websocket connection from server. . | We can also use Server-sent Events. This is not a bidirectional connection. We can send events only from the server. Typical use of this technology is in stock tickers . | . References . Http Polling Issues | Azure Architecure Patterns | .",
            "url": "https://www.prakashn.com/architecture/2022/08/11/Async-Req-Reply.html",
            "relUrl": "/architecture/2022/08/11/Async-Req-Reply.html",
            "date": " • Aug 11, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Products People Buy",
            "content": "1. This solves my pain . Pain can be portrayed in many dimentions: . time | distance | cost eg. GitHub - solves pain of managing versioning of code. eg. Bluetooth headset -solves the pain of handling wires. | . 2. This connects me to community . eg. Meta, Instagram, WhatsApp, Reddit . 3. This makes my life easier . eg. WhatsApp , makes easy to be in touch with anyone in the world. . 4. This feels luxurious . eg. home monitoring system, All features which sales man pitches. . 5. This will make me more money . eg. Tractor for farming, Good Laptop for software engineer. . 6. This will save me more money . 7. This will save me time . eg. spreadsheets saves time for basic calculations .",
            "url": "https://www.prakashn.com/indiehacker/2022/08/09/Products-People-Use.html",
            "relUrl": "/indiehacker/2022/08/09/Products-People-Use.html",
            "date": " • Aug 9, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Hack Lang Notes",
            "content": "Collections . Cheat Sheet . OPERATION VEC DICT KEYSET . Initialize empty | $v = vec[]; | $d = dict[]; | $k = keyset[]; | . Literal | $v = vec[1, 2, 3]; | $d = dict[‘foo’ =&gt; 1]; | $k = keyset[‘foo’, ‘bar’]; | . From Another Container* | $v = vec($container); | $d = dict($keyed_container); | $k = keyset($container); | . Keys from Container* | $v = Vec keys($container); | N/A | $k = Keyset keys($container); | . Add Elements | $v[] = 4; | $d[‘baz’] = 2; | $k[] = ‘baz’; | . Bulk Add Elements | $v = Vec concat($t1, $t2) | $d = Dict merge($kt1, $kt2) | $k = Keyset union($t1, $t2) | . Remove Elements | Remove-at-index is unsupported; Vec drop($v,$n), Vec take($v,$n); $first=C pop_front(inout $x), $last=C pop_back(inout $x) | unset($d[‘baz’]); | unset($k[‘baz’]); | . Key Existence | C contains_key($v, 1) | C contains_key($d, ‘foo’) | C contains_key($k, ‘foo’) | . Value Existence | C contains($v, 3) | C contains($d, 2) | Use C contains_key($k, ‘foo’) | . Equality (Order-Dependent) | $v1 === $v2 | $d1 === $d2 | $k1 === $k2 | . Equality (Order-Independent) | N/A | Dict equal($d1, $d2) | Keyset equal($k1, $k2) | . Count Elements (i.e., length, size of array) | C count($v) | C count($d) | C count($k) | . Type Signature | vec | dict&lt;Tk, Tv&gt; | keyset | . Type Refinement | $v is vec | $d is dict&lt;_, _&gt; | $k is keyset | . Awaitable Consolidation | Vec from_async($v) | Dict from_async($d) | Keyset from_async($x) | . Types . Generic Types: . class StackUnderflowException extends Exception {} class Stack&lt;T&gt; { private vec&lt;T&gt; $stack; private int $stackPtr; public function __construct() { $this-&gt;stackPtr = 0; $this-&gt;stack = vec[]; } public function push(T $value): void { $this-&gt;stack[] = $value; $this-&gt;stackPtr++; } public function pop(): T { if ($this-&gt;stackPtr &gt; 0) { $this-&gt;stackPtr--; return $this-&gt;stack[$this-&gt;stackPtr]; } else { throw new StackUnderflowException(); } } } function use_int_stack(Stack&lt;int&gt; $stInt): void { $stInt-&gt;push(10); $stInt-&gt;push(20); $stInt-&gt;push(30); echo &#39;pop =&gt; &#39;.$stInt-&gt;pop().&quot; n&quot;; } . Nullable Types . A type ?Foo is either a value of type Foo, or null. . function takes_nullable_str2(?string $s): string { if ($s is nonnull){ return $s; } else { return &quot;default&quot;; } } . Type Alias . type Complex = shape(&#39;real&#39; =&gt; float, &#39;imag&#39; =&gt; float); newtype Point = (float, float); function create_Point(float $x, float $y): Point { return tuple($x, $y); } function distance(Point $p1, Point $p2): float { $dx = $p1[0] - $p2[0]; $dy = $p1[1] - $p2[1]; return sqrt($dx*$dx + $dy*$dy); } . newtype Counter as int = int; . The presence of the type constraint as int allows the opaque type to be treated as if it had the type specified by that type constraint, which removes some of the alias’ opaqueness . class C { const type T2 as arraykey = int; ... } . we have a class-specific type constant that is an alias, which allows a value of type T2 to be used in any context an arraykey is expected. After all, any int value is also an arraykey value. . Inheritance . Sealed classes . only classes mentioned in &lt;__Sealed&gt; are able to extend .",
            "url": "https://www.prakashn.com/hacklang/2022/08/08/Hack-Lang.html",
            "relUrl": "/hacklang/2022/08/08/Hack-Lang.html",
            "date": " • Aug 8, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "DynamoDB Quick Reference",
            "content": "Intro . Hosted, scalable database service by Amazon with the data stored in Amazons cloud. | Infinitely scalable, with minimal provisioning. | Managed, closed source DB. | Key-value, schema less DB. | ACID complaint. | Replication: Peer-based, master-master replication (though it is managed by AWS) | Concurrency: Vector Clocks | Sharding: Yes | ✅ Main Differentiator: Highly Available | ❌ Query-ability : table needs to be designed based on access pattern, as it gets difficult to change in the end. | AWS:aws.amazon.com/­dynamodb | Db-engines link | . Data Types . Scalar Data Types . Type Symbol Description JSON Example . String | S | typical string | &quot;S&quot;: &quot;this is a string&quot; | . Number | N | Any int or float | &quot;N&quot;: &quot;98&quot;, &quot;N&quot;:&quot;3.141592&quot; | . Binary | B | Base64 encoded binary data | &quot;B&quot;: &quot;nwaafrafs&quot; | . Boolean | BOOL | true or false | &quot;BOOL&quot;: false | . Null | NULL | use for missing values | &quot;NULL&quot;: true | . Set and Document Data Types . Type Symbol Description JSON Example . String Set | SS | Set of string | “SS”: [“Prakash”, “Natarajan”] | . Number Set | NS | Set of numbers | “NS”: [“1”, “2”] | . Binary Set | BS | Set of Binary | “BS”: [“wsfawefa===”] | . List | L | List that can consist of any scalar type | “L” : [{“S”:”prakash”},{“N”:”1”}] | . Map | M | key-value store with string as keys and any scalar as value | “M”:{“key”:{“S”:”value”}} | . Internal: . Partition based schema performs best when access to partition keys is balanced. | . | . Hot spots . degrade performance and should be avoided. | partition key should not be clustered around few values. | composite key: aim for fewer partition keys and more range keys. | . Key Types . 1) Partition key (hash key) 2) Composite Key (partition key + Sort key) . Indexes . Local Secondary Index . same (partition) hash key, different sort key. | need to be created at table creation | . Global Secondary Index: . Any column. | can be created and modified anytime. | Pay for storage for that index. | .",
            "url": "https://www.prakashn.com/db/aws/nosql/2022/08/07/DynamoDB-Quick-Reference.html",
            "relUrl": "/db/aws/nosql/2022/08/07/DynamoDB-Quick-Reference.html",
            "date": " • Aug 7, 2022"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "👋 Hi, I am Prakash Natarajan 🙂 . I enjoy architecting software systems. 👨‍💻 . I am interested in building highly available, scalable, maintainable software for my clients. I typically select and use best tool for the job rather than going with something generic. 🧰 . My Ex’s: . Meta - Whatsapp | Doordash | Thomson Reuters (2+ years) | FactSet Research Systems (3.5 years) | Cognizant Technology Solutions (3 Years) | . My work: . [Depricated][MockInterview.App] | Gainn.App | . This website contains my notes from various sources I find interesting in internet. 📓 . Please reach out to me at 📨 mail@prakashn.com if you need any assistance with your software needs. 💚 . Take care. 👋 .",
          "url": "https://www.prakashn.com/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://www.prakashn.com/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}